server:
  port: 8000

springdoc:
  api-docs:
    enabled: true
    path: /v3/api-docs
  swagger-ui:
    enabled: true
    path: /swagger-ui.html
    csrf:
      enabled: true
    urls:
      - { name: 'uac', url: '/uac/v3/api-docs' }
      - { name: 'cpc', url: '/cpc/v3/api-docs' }

secure:
  ignore:
    urls:
      - /oauth2/**
      - /uac/v3/api-docs/**
      - /cpc/v3/api-docs/**
      - /swagger-ui.html
      - /webjars/**
      - /v3/api-docs/**

spring:
  security:
    oauth2:
      resourceserver:
        jwt: #配置RSA的公钥访问地址
          jwk-set-uri: http://localhost:8000/oauth2/jwks
  cloud:
    nacos:
      discovery:
        server-addr: 192.168.95.41:8848
    gateway:
      globalcors:
        corsConfigurations:
          '[/**]':
            allowedOrigins: "*"
            allowedMethods:
              - GET
              - POST
      discovery:
        locator:
          enabled: true
      # 默认过滤器（对所有route均生效）
      default-filters:
        - StripPrefix=1
        - name: Retry
          args:
            # 重试次数
            retries: 3
            # 遇到什么样的返回状态才重试，取值参考：org.springframework.http.HttpStatus
            statuses: BAD_GATEWAY
            # 那些类型的方法会才重试（GET、POST等）取值参考：org.springframework.http.HttpMethod
            methods: GET,POST
            # 遇到什么样的series值才重试，取值参考：org.springframework.http.HttpStatus.Series
            # SERVER_ERROR，值是 5，也就是 5XX（5 开头的状态码）
            series: SERVER_ERROR
            # 重试策略
            backoff:
              firstBackoff: 10ms
              maxBackoff: 50ms
              factor: 2
              basedOnPreviousValue: false
      routes:
        - id: uac
          uri: lb://uac
          filters:
            - name: RequestRateLimiter
              args:
                # 令牌桶的速度为每秒10个，相当于QPS
                redis-rate-limiter.replenishRate: 10
                # 桶内能装20个令牌,相当于峰值，要注意的是:第1秒从桶内能取20个,但是第2秒只能取到10个了,因为入桶速度是每秒10个
                redis-rate-limiter.burstCapacity: 20
                # 每个请求需要的令牌数
                redis-rate-limiter.requestedTokens: 1
                # 使用SpEL表达式从Spring容器中获取Bean对象
                key-resolver: "#{@pathKeyResolver}"
          predicates:
            - Method=GET,POST
            - Path=/uac/**
        - id: cpc
          uri: lb://cpc
          filters:
            - name: RequestRateLimiter
              args:
                # 令牌桶的速度为每秒10个，相当于QPS
                redis-rate-limiter.replenishRate: 10
                # 桶内能装20个令牌,相当于峰值，要注意的是:第1秒从桶内能取20个,但是第2秒只能取到10个了,因为入桶速度是每秒10个
                redis-rate-limiter.burstCapacity: 20
                # 每个请求需要的令牌数
                redis-rate-limiter.requestedTokens: 1
                # 使用SpEL表达式从Spring容器中获取Bean对象
                key-resolver: "#{@pathKeyResolver}"
          predicates:
            - Method=GET,POST
            - Path=/cpc/**
        - id: oauth
          uri: lb://oauth
          filters:
            - name: RequestRateLimiter
              args:
                # 令牌桶的速度为每秒10个，相当于QPS
                redis-rate-limiter.replenishRate: 10
                # 桶内能装20个令牌,相当于峰值，要注意的是:假如第1秒从桶内能取50个,但是第2秒只能取到10个了,因为入桶速度是每秒10个
                redis-rate-limiter.burstCapacity: 50
                # 每个请求需要的令牌数
                redis-rate-limiter.requestedTokens: 1
                # 使用SpEL表达式从Spring容器中获取Bean对象
                key-resolver: "#{@pathKeyResolver}"
          predicates:
            - Method=GET,POST
            - Path=/oauth/**
        - id: oauth2
          uri: lb://oauth2
          filters:
            - name: RequestRateLimiter
              args:
                # 令牌桶的速度为每秒10个，相当于QPS
                redis-rate-limiter.replenishRate: 10
                # 桶内能装20个令牌,相当于峰值，要注意的是:第1秒从桶内能取20个,但是第2秒只能取到10个了,因为入桶速度是每秒10个
                redis-rate-limiter.burstCapacity: 20
                # 每个请求需要的令牌数
                redis-rate-limiter.requestedTokens: 1
                # 使用SpEL表达式从Spring容器中获取Bean对象
                key-resolver: "#{@pathKeyResolver}"
          predicates:
            - Method=GET,POST
            - Path=/oauth2/**
  redis:
    timeout: 5000
    cluster:
      max-redirects: 5
      nodes:
        - 192.168.95.31:6379
        - 192.168.95.32:6379
        - 192.168.95.33:6379
        - 192.168.95.36:6379
        - 192.168.95.37:6379
        - 192.168.95.38:6379
    database: 0
    lettuce:
      pool:
        max-active: 8 #连接池最大连接数（使用负值表示没有限制） 默认 8
        max-idle: 8 #连接池中的最大空闲连接 默认 8
        max-wait: -1 #连接池最大阻塞等待时间（使用负值表示没有限制） 默认 -1
        min-idle: 0 #连接池中的最小空闲连接 默认 0
